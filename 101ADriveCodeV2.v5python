{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ndigital_out_a = DigitalOut(brain.three_wire_port.a)\ndigital_out_b = DigitalOut(brain.three_wire_port.b)\ncontroller_1 = Controller(PRIMARY)\nIntake = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nConveyor = Motor(Ports.PORT15, GearSetting.RATIO_18_1, False)\ndigital_out_c = DigitalOut(brain.three_wire_port.c)\nFlipMotor = Motor(Ports.PORT10, GearSetting.RATIO_36_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nPneumatic = False\nisRingSide = False\n\nmotorRightA = Motor(Ports.PORT13, GearSetting.RATIO_18_1, True)\nmotorRightB = Motor(Ports.PORT14, GearSetting.RATIO_18_1, False)\nmotorRightC = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nmotorRightGroup = MotorGroup(motorRightA, motorRightB, motorRightC)\n\nmotorLeftA = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)\nmotorLeftB = Motor(Ports.PORT12, GearSetting.RATIO_18_1, True)\nmotorLeftC = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nmotorLeftGroup = MotorGroup(motorLeftA, motorLeftB, motorLeftC)\ndrivetrain = DriveTrain(motorLeftGroup, motorRightGroup)\n\ndef tankDrive():\n    motorLeftGroup.set_velocity(controller_1.axis3.position(), PERCENT)\n    motorRightGroup.set_velocity(controller_1.axis2.position(), PERCENT)\n    motorLeftGroup.spin(FORWARD)\n    motorRightGroup.spin(FORWARD)\n\ndef splitDrive():\n    motorLeftGroup.set_velocity((controller_1.axis3.position() + controller_1.axis1.position()), PERCENT);\n    motorRightGroup.set_velocity((controller_1.axis3.position() - controller_1.axis1.position()), PERCENT);\n    motorLeftGroup.spin(FORWARD)\n    motorRightGroup.spin(FORWARD)\n\ndef onevent_controller_1buttonL1_pressed_0():\n    # ALL 5.5 WATT MOTORS NEED TO BE SPUN AT 12 VOLTS.\n    Intake.spin(REVERSE, 12, VOLT)\n    Conveyor.spin(REVERSE, 12, VOLT)\n    while controller_1.buttonL1.pressing():\n        wait(5, MSEC)\n    Intake.stop()\n    Conveyor.stop()\n\ndef onevent_controller_1buttonUp_pressed_0():\n    FlipMotor.spin(REVERSE, 40, PERCENT)\n    while controller_1.buttonUp.pressing():\n        wait(5, MSEC)\n    FlipMotor.stop()\n\ndef onevent_controller_1buttonDown_pressed_0():\n    FlipMotor.spin(FORWARD, 40, PERCENT)\n    while controller_1.buttonDown.pressing():\n        wait(5, MSEC)\n    FlipMotor.stop()\n\ndef onevent_controller_1buttonA_pressed_0():\n    global Pneumatic\n    if Pneumatic:\n        digital_out_a.set(True)\n        digital_out_b.set(True)\n        Pneumatic = False\n    else:\n        digital_out_a.set(False)\n        digital_out_b.set(False)\n        Pneumatic = True\n\ndef onevent_controller_1buttonL2_pressed_0():\n    # ALL 5.5 WATT MOTORS NEED TO BE SPUN AT 12 VOLTS.\n    Intake.spin(FORWARD, 12, VOLT)\n    Conveyor.spin(FORWARD, 12, VOLT)\n    while controller_1.buttonL2.pressing():\n        wait(5, MSEC)\n    Intake.stop()\n    Conveyor.stop()\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef autonomous():\n    global isRingSide\n    gearRatio = 0.8 #if drive, divide by gear ratio, if turn, multiply by gear ratio to get actual amount\n    # Start the autonomous control tasks\n    auton_task_0 = Thread(autonomous)\n    drivetrain.set_drive_velocity(40, PERCENT)\n    Intake.set_velocity(80, PERCENT)\n    Conveyor.set_velocity(80, PERCENT)\n    # wait for the driver control period to end\n    #while(competition.is_autonomous() and competition.is_enabled()):\n        #if(isRingSide):\n\n    drivetrain.drive_for(FORWARD, 12.5/gearRatio)\n    FlipMotor.spin(REVERSE, 80, PERCENT)\n    wait(.5, SECONDS)\n    FlipMotor.stop()\n    FlipMotor.spin(FORWARD, 80, PERCENT)\n    wait(.5, SECONDS)\n    FlipMotor.stop()\n    wait(.5, SECONDS)\n    drivetrain.drive_for(REVERSE, 3/gearRatio)\n    drivetrain.turn_for(LEFT, 70*gearRatio)\n    FlipMotor.spin(REVERSE, 40, PERCENT)\n    drivetrain.set_drive_velocity(60, PERCENT)\n    drivetrain.drive_for(FORWARD, 24/gearRatio, wait=False)\n    wait(.25, SECONDS)\n    FlipMotor.stop()\n    #Intake, cycle once, then stop conveyer belt to hold\n    Conveyor.spin(REVERSE, 6, VOLT)\n    Intake.spin(REVERSE, 12, VOLT)\n    wait(2.50, SECONDS)\n    Intake.stop()\n    Conveyor.stop()\n    drivetrain.turn_for(RIGHT, 70*gearRatio)\n    drivetrain.drive_for(REVERSE, 35/gearRatio)\n    drivetrain.set_drive_velocity(50, PERCENT)\n    drivetrain.drive_for(REVERSE, 5/gearRatio)\n    digital_out_a.set(True)\n    digital_out_b.set(True)\n    drivetrain.set_drive_velocity(80, PERCENT)\n    Intake.spin(FORWARD, 12, VOLT)\n    Conveyor.spin(FORWARD, 12, VOLT)\n    drivetrain.turn_for(RIGHT, 130*gearRatio)\n    drivetrain.drive_for(FORWARD, 27/gearRatio)\n    \"\"\"\n    drivetrain.turn_for(RIGHT, 180*gearRatio)\n    drivetrain.drive_for(FORWARD, 30/gearRatio) #Overextends 6 inches for safety\n    \"\"\"\n        #else:\n            #pass #Insert code for StakeSide\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n\ndef user_control():\n    # Start the driver control tasks\n\n    # wait for the driver control period to end\n    while(competition.is_driver_control() and competition.is_enabled()):\n        splitDrive()\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n\ndef when_started():\n    global isRingSide\n    isRingSide = True\n\n# register the competition functions\ncompetition = Competition(user_control, autonomous)\n\n# system event handlers\nwhen_started()\n\ncontroller_1.buttonUp.pressed(onevent_controller_1buttonUp_pressed_0)\ncontroller_1.buttonDown.pressed(onevent_controller_1buttonDown_pressed_0)\ncontroller_1.buttonA.pressed(onevent_controller_1buttonA_pressed_0)\ncontroller_1.buttonL1.pressed(onevent_controller_1buttonL1_pressed_0)\ncontroller_1.buttonL2.pressed(onevent_controller_1buttonL2_pressed_0)","textLanguage":"python","robotConfig":[{"port":[1],"name":"digital_out_a","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[2],"name":"digital_out_b","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[15],"name":"Conveyor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[3],"name":"digital_out_c","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[10],"name":"FlipMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}